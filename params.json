{"name":"PyIRC","tagline":"An extensible and easy-to-use IRC library for Python","body":"# PyIRC\r\nThis is PyIRC, an IRC library designed to be flexible, extensible, well-\r\ndocumented, and easy to use. It is aimed at not only beginners and those who\r\ndon't want to spend too much time writing boilerplate to get something going¸\r\nbut also the advanced user who knows exactly what they're doing.\r\n\r\nIt is entirely written in Python 3 with only optional external dependencies.\r\n\r\n## Introduction\r\nWritten by people who have been involved in IRC daemon coding for over 7\r\nyears, this library has been designed with standards compliance in mind. This\r\nlibrary aims to follow [RFC1459](http://tools.ietf.org/html/rfc1459.html),\r\n[RFC2812](http://tools.ietf.org/html/rfc2812.html), and\r\n[IRCv3](http://ircv3.org)\r\n\r\nThe following standards should be fully implemented:\r\n* RFC1459 (though not all commands are handled because they are beyond the\r\n  scope of the library)\r\n* RFC2812 (the different USER syntax is not well-supported, and is not used)\r\n* IRCv3.0\r\n* IRCv3.1\r\n\r\nThe following standards are not fully implemented:\r\n* IRCv3.2 (tags and some capabilities should work, but most capabilities are\r\n  not presently implemented; there are also few implementations right now).\r\n\r\nThe library presently supports the following using an extensions system,\r\nmeaning all of these are optional:\r\n- Channel autojoin\r\n- Autorejoin on kick\r\n- STARTTLS (automatic SSL negotiation)\r\n- IRCv3 Message tags, though not thoroughly tested\r\n- SASL (PLAIN auth only right now - more methods are coming)\r\n- CAP - dynamic capabilities negotiation\r\n- Scheduled events (aka timers)\r\n- Ability to hook any numeric/command\r\n- Ability to hook connect, disconnect, and a variety of other higher-level\r\n  events\r\n\r\nSee the [TODO](http://github.com/foxkit-us/PyIRC/blob/master/TODO.md) for the\r\nlist of planned features.\r\n\r\n## Design\r\nPyIRC 3 is designed to be wholly uncoupled from the underlying I/O subsystem\r\nwhilst providing easy ways to ingest events. It is designed to work with any\r\nreasonably well-written event system.\r\n\r\nThis library is not thread-safe and therefore caution should be used when\r\nusing PyIRC with threads. It does not, however, modify state outside of its\r\nown classes, so it's safe to run instances in threads.\r\n\r\n## Platforms\r\nThe library is completely cross-platform and should work anywhere Python does,\r\nso long as it has a working socket implementation (SSL usage depends on your\r\nPython build having support for the `ssl` module - this should be almost all\r\nmodern platforms).\r\n\r\nPyIRC 3 requires Python 3.3 or newer. asyncio support requires either 3.4, or\r\nfor asyncio to be installed from PyPI.\r\n\r\n## Documentation\r\nDocumentation is automatically generated and placed\r\n[here](http://foxkit.us/PyIRC/) for perusal. Our docs coverage is very\r\ncomplete.\r\n\r\n## Bugs\r\nProbably many! Tell us about them - see the support section or just file an\r\nissue on the [bug tracker :)](http://github.com/foxkit-us/PyIRC/issues).\r\n\r\n## Support\r\nWe can be reached easily at irc.interlinked.me #PyIRC for general questions.\r\nPull requests and patches are always welcomed. Features can be requested via\r\nthe bug tracker.\r\n\r\n## License and copyright\r\nCopyright © 2013-2015 Andrew Wilcox and Elizabeth Myers. All rights reserved.\r\n\r\nNon-third party files are licensed under the WTFPL; terms and conditions can be\r\nfound at:\r\n\r\n\thttp://www.wtfpl.net/about/\r\n\r\nSelon votre choix, vous pouvez aussi utiliser la Licence Publique Rien À\r\nBranler (LPRAB):\r\n\r\n\thttp://sam.zoy.org/lprab/\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}